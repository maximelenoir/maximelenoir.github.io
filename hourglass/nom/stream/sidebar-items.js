initSidebarItems({"enum":[["ConsumerState","Stores a consumer's current computation state"],["FileProducerState",""],["Input",""],["Move",""]],"fn":[["shift",""]],"struct":[["ChainConsumer","ChainConsumer takes a consumer C1 R -> S, and a consumer C2 S -> T, and makes a consumer R -> T by applying C2 on C1's result"],["FileProducer",""],["MapConsumer","MapConsumer takes a function S -> T and applies it on a consumer producing values of type S"],["MemProducer","A MemProducer generates values from an in memory byte bufferit generates data by chunks, and keeps track of how much was consumed. It can receive messages of type `Move` to handle consumption and seeking"],["ProducerRepeat","ProducerRepeat takes a single value, and generates it at each step"]],"trait":[["Consumer","The Consumer trait wraps a computation and its stateit depends on the input type I, the produced value's type O, the error type E, and the message type M"],["Producer","The producer wraps a data source, like file or network, and applies a consumer on itit handles buffer copying and reallocation, to provide streaming patterns. it depends on the input type I, and the message type M. the consumer can change the way data is produced (for example, to seek in the source) by sending a message of type M."]]});